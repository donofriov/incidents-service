#!/usr/bin/env bash
set -euo pipefail

# Config (override via env)
TARGET_VERSION="${TARGET_VERSION:-0.1.0}"
IMAGE_NAME="${IMAGE_NAME:-incidents-service}"
NAMESPACE="${NAMESPACE:-incidents}"
RELEASE="${RELEASE:-${IMAGE_NAME}}"
CLUSTER_NAME="${CLUSTER_NAME:-local}"

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"

INSTALL_KIND="${REPO_ROOT}/provisioning/kind/bin/install-kind"
CREATE_CLUSTERS="${REPO_ROOT}/provisioning/kind/bin/create-clusters"
RELEASE_SCRIPT="${REPO_ROOT}/bin/release"
DEPLOY_SCRIPT="${REPO_ROOT}/bin/deploy"

echo "üîß Ensuring kind + cluster exist (idempotent)‚Ä¶"
"${INSTALL_KIND}"
"${CREATE_CLUSTERS}"

echo "üîé Checking current deployment image‚Ä¶"
CURRENT_IMAGE="$(kubectl -n "${NAMESPACE}" get deploy "${RELEASE}" -o jsonpath='{.spec.template.spec.containers[0].image}' 2>/dev/null || true)"
CURRENT_TAG="${CURRENT_IMAGE##*:}"

if [ -z "${CURRENT_IMAGE}" ]; then
  echo "üì¶ No deployment found. Bootstrapping ${RELEASE}:${TARGET_VERSION}‚Ä¶"
  "${RELEASE_SCRIPT}" "${TARGET_VERSION}"
  "${DEPLOY_SCRIPT}" "${TARGET_VERSION}"
  exit 0
fi

if [ "${CURRENT_TAG}" = "${TARGET_VERSION}" ]; then
  echo "‚úÖ ${RELEASE} is already at ${TARGET_VERSION}. Nothing to do."
  exit 0
fi

echo "‚ÑπÔ∏è ${RELEASE} is running ${CURRENT_TAG}, not ${TARGET_VERSION}. Not downgrading."
echo "üëâ To build a new release:         ${REPO_ROOT}/bin/release <version>"
echo "üëâ To deploy an existing tag:      ${REPO_ROOT}/bin/deploy  <version>"
echo "üëâ To release and deploy:          ${REPO_ROOT}/bin/deliver <version>"
